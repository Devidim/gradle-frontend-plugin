/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.10/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version "1.2.1"
    id 'maven-publish'
}

def defaultEncoding = 'UTF-8'
def pluginVersion = '2.1.0'
def groupId = 'com.matsuyoido'
def artifactId = 'frontend'

version = "$pluginVersion"
group = "$groupId"

jar {
	archiveBaseName = "matsuyoido-frontend-gradle-plugin"
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

java {
    [compileJava, compileTestJava]*.options*.encoding = "${defaultEncoding}"
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    //test.compileClasspath += configurations.compileOnly
    //test.runtimeClasspath += configurations.compileOnly
    test.compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
}

javadoc {
    options.charSet = "${defaultEncoding}"
    options.encoding = "${defaultEncoding}"
    failOnError = false // javadoc create error, but publish not require. Because, failed ignore.
}

tasks.withType(JavaCompile) {
    options.encoding = "${defaultEncoding}"
}

tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

task initSrcDirs {
    doLast {
        sourceSets.all {
            java.srcDirs*.mkdirs()
        }
    }
}
tasks.eclipse.dependsOn(initSrcDirs)

dependencies {
    implementation gradleApi()

    implementation 'io.bit3:jsass:5.9.2'
    implementation 'com.yahoo.platform.yui:yuicompressor:2.4.8'
    implementation 'com.google.javascript:closure-compiler-unshaded:v20191027'
    // https://github.com/google/auto/blob/master/value/userguide/index.md
    implementation 'com.google.auto.value:auto-value-annotations:1.7'
    annotationProcessor 'com.google.auto.value:auto-value:1.7'
    // closure-compiler is required above...
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9.3'

    implementation 'com.helger:ph-css:6.2.0'
    implementation 'org.webjars.npm:caniuse-db:1.0.30000748'

    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


gradlePlugin {
    website = 'https://github.com/matsuyoido/gradle-frontend-plugin' // temporary url
    vcsUrl = 'https://github.com/matsuyoido/gradle-frontend-plugin'

    plugins {
        frontEndPlugin {
            id = "$groupId.$artifactId"
            displayName = 'This plugin support preparation of deliverables.'
            description = 'scss -> css | css -> min.css | js -> min.js'
            version = "$pluginVersion"
            tags = ['preprocessor', 'scss', 'minify']
            implementationClass = 'com.matsuyoido.plugin.frontend.MainPlugin'
        }
    }
}

publishing {
    repositories {
        maven {
            name = "localGithubRepo"
            url = uri("${projectDir}/../../maven-repo")
        }
    }
}
